<?xml version="1.0" encoding="UTF-8"?>

<scrisp-grammar>

  <!-- GRAMMAR -->

  <tree id="i.N">
    <leaf cat="N" type="anchor" sem="self" />
  </tree>

  <tree id="a.An">
    <node cat="N" sem="self">
      <leaf cat="A" type="anchor" sem="self"/>
      <leaf cat="N" type="foot" sem="self" />
    </node>
  </tree>

  <tree id="i.Dn">   <!-- non-XTAG --> 
    <node cat="NP" sem="self">
      <leaf cat="D" type="anchor" sem="self" />
      <node type="substitution" cat="N" sem="self" />
    </node>
  </tree>

  <tree id="i.transImperative">
    <node cat="S" sem="self">
       <node cat="VP" sem="self">
  	     <leaf cat="V" type="anchor" sem="self"/>
	     <leaf cat="NP" type="substitution" sem="obj" />
       </node>
     </node>
  </tree>

  <tree id="i.intransImperative">
    <node cat="S" sem="self">
       <node cat="VP" sem="self">
  	     <leaf cat="V" type="anchor" sem="self"/>
       </node>
     </node>
  </tree>

  <tree id="a.sentConjunction">
    <node cat="S" sem="self">
      <leaf cat="S" type="foot" sem="self"/>
      <leaf cat="Conj" type="anchor" sem="self" />
      <leaf cat="S" type="substitution" sem="other" />
    </node>
  </tree>

<!--
  <tree id="i.transPPImperative">
    <node cat="S" sem="self">
      <node cat="VP" sem="self">
        <leaf cat="V" type="anchor" sem="self"/>
        <node cat="VP" sem="self">
          <node cat="V" sem="self">
            <leaf cat="" type="terminal" sem="self"/>
          </node>
          <node cat="PP" sem="ppobj">
            <leaf cat="P" type="lex" sem="ppobj"/>
            <leaf cat="NP" type="substitution" sem="ppobj"/>
          </node>
        </node>
      </node>
    </node>
  </tree>  

 <tree id="a.sentConjunction2">
    <node cat="S" sem="self">
      <leaf cat="S" type="substitution" sem="other" />
      <leaf cat="Conj" type="anchor" sem="self" />
      <leaf cat="S" type="foot" sem="self"/>
    </node>
  </tree>  

  <tree id="i.ditransPP1PP2Imperative">
    <node cat="S" sem="self">
      <node cat="VP" sem="self">
        <leaf cat="V" type="anchor" sem="self"/>
        <node cat="VP" sem="self">
          <node cat="V" sem="self">
            <leaf cat="" type="terminal" sem="self"/>
          </node>
          <node cat="PP" sem="ppobj1">
            <leaf cat="P" type="lex" sem="ppobj1"/>
            <leaf cat="NP" type="substitution" sem="ppobj1"/>
          </node>
        </node>
        <node cat="VP" sem="self">
          <node cat="V" sem="self">
            <leaf cat="" type="terminal" sem="self"/>
          </node>
          <node cat="PP" sem="ppobj2">
            <leaf cat="P" type="lex" sem="ppobj2"/>
            <leaf cat="NP" type="substitution" sem="ppobj2"/>
          </node>
	</node>
      </node>
    </node>
  </tree>
-->  

  <!-- LEXICON -->

  <entry word='push' pos='V'>
    <tree refid="i.transImperative">
      <semreq>button(obj)</semreq> 
      <semreq>visible(p,o,obj)</semreq>
      <pragcond>target(obj)</pragcond>
      <pragcond>player-position(p)</pragcond>
      <pragcond>player-orientation(o)</pragcond>
      <pragcond>object-orientation(obj,o3)</pragcond>
      <pragcond>next-orientation-left(o,o2)</pragcond>
      <pragcond>next-orientation-left(o2,o3)</pragcond>
      <impeff>push(self,obj)</impeff>
      <param type="positiontype">p</param>
      <param type="orientationtype">o</param>
      <param type="orientationtype">o2</param>
      <param type="orientationtype">o3</param>
    </tree>
  </entry>

  <entry word='moveonestep' pos='V'>
    <tree refid="i.intransImperative">
      <pragcond>player-position(p1)</pragcond>
      <pragcond>player-orientation(o)</pragcond>
      <pragcond>adjacent(p1,p2,o)</pragcond>
      <pragcond>not(blocked(p1,p2))</pragcond>
      <pragcond>not(alarmed(p2))</pragcond>
      <prageff>not(player-position(p1))</prageff>
      <prageff>player-position(p2)</prageff>
      <impeff>moveonestep(self)</impeff>
      <param type="positiontype">p1</param>
      <param type="positiontype">p2</param>
      <param type="orientationtype">o</param>
    </tree>
  </entry>

  <entry word='movetwosteps' pos='V'>
    <tree refid="i.intransImperative">
      <pragcond>player-position(p1)</pragcond>
      <pragcond>player-orientation(o)</pragcond>
      <pragcond>adjacent(p1,p2,o)</pragcond>
      <pragcond>not(blocked(p1,p2))</pragcond>
      <pragcond>not(alarmed(p2))</pragcond>
      <pragcond>adjacent(p2,p3,o)</pragcond>
      <pragcond>not(blocked(p2,p3))</pragcond>
      <pragcond>not(alarmed(p3))</pragcond>
      <prageff>not(player-position(p1))</prageff>
      <prageff>player-position(p3)</prageff>
      <impeff>movetwosteps(self)</impeff>
      <param type="positiontype">p1</param>
      <param type="positiontype">p2</param>
      <param type="positiontype">p3</param>
      <param type="orientationtype">o</param>
    </tree>
  </entry>

  <entry word='movethreesteps' pos='V'>
    <tree refid="i.intransImperative">
      <pragcond>player-position(p1)</pragcond>
      <pragcond>player-orientation(o)</pragcond>
      <pragcond>adjacent(p1,p2,o)</pragcond>
      <pragcond>not(blocked(p1,p2))</pragcond>
      <pragcond>not(alarmed(p2))</pragcond>
      <pragcond>adjacent(p2,p3,o)</pragcond>
      <pragcond>not(blocked(p2,p3))</pragcond>
      <pragcond>not(alarmed(p3))</pragcond>
      <pragcond>adjacent(p3,p4,o)</pragcond>
      <pragcond>not(blocked(p3,p4))</pragcond>
      <pragcond>not(alarmed(p4))</pragcond>
      <prageff>not(player-position(p1))</prageff>
      <prageff>player-position(p4)</prageff>
      <impeff>movethreesteps(self)</impeff>
      <param type="positiontype">p1</param>
      <param type="positiontype">p2</param>
      <param type="positiontype">p3</param>
      <param type="positiontype">p4</param>
      <param type="orientationtype">o</param>
    </tree>
  </entry>

  <entry word='turnleft' pos='V'>
    <tree refid="i.intransImperative">
      <pragcond>player-orientation(o1)</pragcond>
      <pragcond>next-orientation-left(o1,o2)</pragcond>
      <prageff>not(player-orientation(o1))</prageff>
      <prageff>player-orientation(o2)</prageff>
      <impeff>turnleft(self)</impeff>
      <param type="orientationtype">o1</param>
      <param type="orientationtype">o2</param>
    </tree>
  </entry>

  <entry word='turnright' pos='V'>
    <tree refid="i.intransImperative">
      <pragcond>player-orientation(o1)</pragcond>
      <pragcond>next-orientation-left(o2,o1)</pragcond>
      <prageff>not(player-orientation(o1))</prageff>
      <prageff>player-orientation(o2)</prageff>
      <impeff>turnright(self)</impeff>
      <param type="orientationtype">o1</param>
      <param type="orientationtype">o2</param>
    </tree>
  </entry>

  <entry word='turnaround' pos='V'>
    <tree refid="i.intransImperative">
      <pragcond>player-orientation(o1)</pragcond>
      <pragcond>next-orientation-left(o1,o2)</pragcond>
      <pragcond>next-orientation-left(o2,o3)</pragcond>
      <prageff>not(player-orientation(o1))</prageff>
      <prageff>player-orientation(o3)</prageff>
      <impeff>turnaround(self)</impeff>
      <param type="orientationtype">o1</param>
      <param type="orientationtype">o2</param>
      <param type="orientationtype">o3</param>
    </tree>
  </entry>

  <entry word='and' pos='Conj'>
    <tree refid="a.sentConjunction">
      <pragcond>next-referent(self,other)</pragcond>
      <pragcond>conj-node(id(other))</pragcond>
      <prageff>not(conj-node(next(other)))</prageff>
    </tree>
  </entry>   

  <entry word='then' pos='Conj'>
    <tree refid="a.sentConjunction">
      <pragcond>next-referent(self,other)</pragcond>
      <pragcond>not(conj-node(id(other)))</pragcond>
      <prageff>conj-node(next(other))</prageff>
    </tree>
  </entry> 

  <entry word='left' pos='A'>
    <tree refid='a.An'>
      <pragcond>forall(y,not(and(distractor(id(self),y),left-of(y,self))))</pragcond>
      <prageff>forall(y,when(left-of(self,y),not(distractor(id(self),y))))</prageff>
      <var>y</var>
    </tree>
  </entry>

  <entry word='right' pos='A'>
    <tree refid='a.An'>
      <pragcond>forall(y,not(and(distractor(id(self),y),left-of(self,y))))</pragcond>
      <prageff>forall(y,when(left-of(y,self),not(distractor(id(self),y))))</prageff>
      <var>y</var>
    </tree>
  </entry>

  <entry word='upper' pos='A'>
    <tree refid='a.An'>
      <pragcond>forall(y,not(and(distractor(id(self),y),above(y,self))))</pragcond>
      <prageff>forall(y,when(above(self,y),not(distractor(id(self),y))))</prageff>
      <var>y</var>
    </tree>
  </entry>

  <entry word='lower' pos='A'>
    <tree refid='a.An'>
      <pragcond>forall(y,not(and(distractor(id(self),y),above(self,y))))</pragcond>
      <prageff>forall(y,when(above(y,self),not(distractor(id(self),y))))</prageff>
      <var>y</var>
    </tree>
  </entry>

  <entry word='blue' pos='A'>
    <tree refid='a.An'>
      <semcontent>blue(self)</semcontent>
    </tree>
  </entry>

  <entry word='red' pos='A'>
    <tree refid='a.An'>
      <semcontent>red(self)</semcontent>
    </tree>
  </entry>

  <entry word='green' pos='A'>
    <tree refid='a.An'>
      <semcontent>green(self)</semcontent>
    </tree>
  </entry>

  <entry word='the' pos='D'>
    <tree refid="i.Dn">
    </tree>
  </entry>

  <entry word='button' pos='N'>
    <tree refid="i.N">
      <semcontent>button(self)</semcontent>
    </tree>
  </entry>

  <entry word='alarm' pos='N'>
    <tree refid="i.N">
      <semcontent>alarm(self)</semcontent>
    </tree>
  </entry>

  <entry word='door' pos='N'>
    <tree refid="i.N">
      <semcontent>door(self)</semcontent>
    </tree>
  </entry>

  <entry word='safe' pos='N'>
    <tree refid="i.N">
      <semcontent>safe(self)</semcontent>
    </tree>
  </entry>

  <entry word='picture' pos='N'>
    <tree refid="i.N">
      <semcontent>picture(self)</semcontent>
    </tree>
  </entry>

  <entry word='lamp' pos='N'>
    <tree refid="i.N">
      <semcontent>lamp(self)</semcontent>
    </tree>
  </entry>

  <entry word='flower' pos='N'>
    <tree refid="i.N">
      <semcontent>flower(self)</semcontent>
    </tree>
  </entry>

  <entry word='chair' pos='N'>
    <tree refid="i.N">
      <semcontent>chair(self)</semcontent>
    </tree>
  </entry>

  <entry word='trophy' pos='N'>
    <tree refid="i.N">
      <semcontent>trophy(self)</semcontent>
    </tree>
  </entry>

</scrisp-grammar>