#summary Instructions on compiling and running the CRISP system.
#labels Featured

= Requirements =

In order to build the CRISP system, you will need the following software:
 * Java SE 5.0 Development Kit or higher (get it [http://java.sun.com/javase/downloads/index.jsp here], unless you have a Mac, in which case it should come preinstalled on you machine)
 * Apache Maven (get it [http://maven.apache.org/download.html here]). 
 * A Subversion client (if you can't get one through the package management system of your platform, e.g. Cygwin, apt-get, etc., you can get binaries [http://subversion.tigris.org/project_packages.html here]).


= Building CRISP =

Assuming your Java and Maven are installed properly, build CRISP as follows:
 * Check out the Subversion repository using the following command:
   {{{
   svn checkout http://crisp-nlg.googlecode.com/svn/trunk/Code crisp-nlg
   }}}
 (See also the [http://code.google.com/p/crisp-nlg/source instructions for checking out from the Google Code repository].)
 * Change to the new `crisp-nlg` subdirectory.
 * Build the system using Maven:
   {{{
   mvn assembly:assembly
   }}}
   Maven will automatically download all required dependencies and store them in your local maven repository. 
   It will then compile CRISP and finally assemble an executable jar file that contains CRISP and all required libraries.

The executable Jar file is now in `target/crisp-nlg-[version number]-jar-with-dependencies.jar`.


= Running CRISP =
Run the combined converter and planner on an example input file:
{{{
java -jar target/crisp-nlg-[version number]-jar-with-dependencies.jar grammars/acl07/modifiers/problem-acl-mod2.xml
}}}

This should display a plan corresponding to the sentence "Mary likes the white foo1 rabbit", a TAG derivation tree, a derived trees and the resulting output sentence. It should also leave behind the files `crisptest-mod2-domain.lisp` and `crisptest-mod2-problem.lisp`, which are PDDL input files that can be solved with other off-the-shelf planners.

The format for the input files should be straightforward; see the examples.